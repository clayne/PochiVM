; ModuleID = 'test'
source_filename = "test"

define zeroext i1 @f(i1 %_r_0, i32* %_dst_1, i64 %_offset_2) {
entry:
  %r_0 = alloca i1
  %dst_1 = alloca i32*
  %offset_2 = alloca i64
  br label %body

body:                                             ; preds = %entry
  store i1 %_r_0, i1* %r_0
  store i32* %_dst_1, i32** %dst_1
  store i64 %_offset_2, i64* %offset_2
  %0 = load i32*, i32** %dst_1
  %1 = load i32, i32* %0
  %2 = add i32 %1, 1
  %3 = load i32*, i32** %dst_1
  store i32 %2, i32* %3
  %4 = load i32*, i32** %dst_1
  %5 = load i32, i32* %4
  %6 = load i32*, i32** %dst_1
  %7 = ptrtoint i32* %6 to i64
  %8 = load i64, i64* %offset_2
  %9 = mul i64 %8, 4
  %10 = add i64 %7, %9
  %11 = inttoptr i64 %10 to i32*
  store i32 %5, i32* %11
  %12 = load i1, i1* %r_0
  ret i1 %12
}

define zeroext i1 @logical_and(i32* %_out_0, i1 %_a_1, i1 %_b_2) {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i1
  %b_2 = alloca i1
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  store i1 %_a_1, i1* %a_1
  store i1 %_b_2, i1* %b_2
  %0 = load i1, i1* %a_1
  %1 = load i32*, i32** %out_0
  %2 = call i1 @f(i1 %0, i32* %1, i64 1)
  br i1 %2, label %logical_and_rhs0, label %logical_and_result0

logical_and_rhs0:                                 ; preds = %body
  %3 = load i1, i1* %b_2
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 2)
  br label %logical_and_result0

logical_and_result0:                              ; preds = %logical_and_rhs0, %body
  %6 = phi i1 [ %2, %body ], [ %5, %logical_and_rhs0 ]
  ret i1 %6
}

define zeroext i1 @logical_fn_3(i32* %_out_0, i1 %_a_1, i1 %_b_2) {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i1
  %b_2 = alloca i1
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  store i1 %_a_1, i1* %a_1
  store i1 %_b_2, i1* %b_2
  %0 = load i1, i1* %a_1
  %1 = load i32*, i32** %out_0
  %2 = call i1 @f(i1 %0, i32* %1, i64 1)
  %3 = xor i1 %2, true
  br i1 %3, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %body
  %4 = load i1, i1* %b_2
  %5 = load i32*, i32** %out_0
  %6 = call i1 @f(i1 %4, i32* %5, i64 2)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_rhs0, %body
  %7 = phi i1 [ %3, %body ], [ %6, %logical_or_rhs0 ]
  ret i1 %7
}

define zeroext i1 @logical_fn_4(i32* %_out_0, i1 %_a_1, i1 %_b_2) {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i1
  %b_2 = alloca i1
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  store i1 %_a_1, i1* %a_1
  store i1 %_b_2, i1* %b_2
  %0 = load i1, i1* %a_1
  %1 = load i32*, i32** %out_0
  %2 = call i1 @f(i1 %0, i32* %1, i64 1)
  %3 = xor i1 %2, true
  br i1 %3, label %logical_and_rhs1, label %logical_and_result1

logical_and_rhs1:                                 ; preds = %body
  %4 = load i1, i1* %b_2
  %5 = load i32*, i32** %out_0
  %6 = call i1 @f(i1 %4, i32* %5, i64 2)
  br label %logical_and_result1

logical_and_result1:                              ; preds = %logical_and_rhs1, %body
  %7 = phi i1 [ %3, %body ], [ %6, %logical_and_rhs1 ]
  br i1 %7, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %logical_and_result1
  %8 = load i1, i1* %a_1
  br i1 %8, label %logical_or_result2, label %logical_or_rhs2

logical_or_rhs2:                                  ; preds = %logical_or_rhs0
  %9 = load i1, i1* %b_2
  %10 = xor i1 %9, true
  br label %logical_or_result2

logical_or_result2:                               ; preds = %logical_or_rhs2, %logical_or_rhs0
  %11 = phi i1 [ %8, %logical_or_rhs0 ], [ %10, %logical_or_rhs2 ]
  %12 = load i32*, i32** %out_0
  %13 = call i1 @f(i1 %11, i32* %12, i64 3)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_result2, %logical_and_result1
  %14 = phi i1 [ %7, %logical_and_result1 ], [ %13, %logical_or_result2 ]
  ret i1 %14
}

define zeroext i1 @logical_fn_5(i32* %_out_0, i1 %_a_1, i1 %_b_2) {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i1
  %b_2 = alloca i1
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  store i1 %_a_1, i1* %a_1
  store i1 %_b_2, i1* %b_2
  %0 = load i1, i1* %a_1
  %1 = load i32*, i32** %out_0
  %2 = call i1 @f(i1 %0, i32* %1, i64 1)
  br i1 %2, label %logical_or_result1, label %logical_or_rhs1

logical_or_rhs1:                                  ; preds = %body
  %3 = load i1, i1* %b_2
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 2)
  br label %logical_or_result1

logical_or_result1:                               ; preds = %logical_or_rhs1, %body
  %6 = phi i1 [ %2, %body ], [ %5, %logical_or_rhs1 ]
  %7 = load i32*, i32** %out_0
  %8 = call i1 @f(i1 %6, i32* %7, i64 3)
  br i1 %8, label %logical_and_rhs0, label %logical_and_result0

logical_and_rhs0:                                 ; preds = %logical_or_result1
  %9 = load i1, i1* %a_1
  %10 = load i32*, i32** %out_0
  %11 = call i1 @f(i1 %9, i32* %10, i64 4)
  br i1 %11, label %logical_and_rhs2, label %logical_and_result2

logical_and_rhs2:                                 ; preds = %logical_and_rhs0
  %12 = load i1, i1* %b_2
  %13 = load i32*, i32** %out_0
  %14 = call i1 @f(i1 %12, i32* %13, i64 5)
  br label %logical_and_result2

logical_and_result2:                              ; preds = %logical_and_rhs2, %logical_and_rhs0
  %15 = phi i1 [ %11, %logical_and_rhs0 ], [ %14, %logical_and_rhs2 ]
  %16 = load i32*, i32** %out_0
  %17 = call i1 @f(i1 %15, i32* %16, i64 6)
  %18 = xor i1 %17, true
  br label %logical_and_result0

logical_and_result0:                              ; preds = %logical_and_result2, %logical_or_result1
  %19 = phi i1 [ %8, %logical_or_result1 ], [ %18, %logical_and_result2 ]
  ret i1 %19
}

define zeroext i1 @logical_or(i32* %_out_0, i1 %_a_1, i1 %_b_2) {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i1
  %b_2 = alloca i1
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  store i1 %_a_1, i1* %a_1
  store i1 %_b_2, i1* %b_2
  %0 = load i1, i1* %a_1
  %1 = load i32*, i32** %out_0
  %2 = call i1 @f(i1 %0, i32* %1, i64 1)
  br i1 %2, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %body
  %3 = load i1, i1* %b_2
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 2)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_rhs0, %body
  %6 = phi i1 [ %2, %body ], [ %5, %logical_or_rhs0 ]
  ret i1 %6
}
